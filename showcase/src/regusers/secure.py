import uuid
from typing import Annotated

from fastapi import HTTPException, status, Depends
from sqlalchemy import select
from sqlalchemy.orm import Session
from starlette.status import HTTP_404_NOT_FOUND
from starlette.status import HTTP_400_BAD_REQUEST

from .models import User, Token
from .schemas import UserCreate, MailBody

from fastapi.security import APIKeyHeader, APIKeyCookie, OAuth2PasswordBearer
from passlib.context import CryptContext
from jose import JWTError, jwt
from src.settings import KEY, KEY2, ALG, EXPIRE_TIME, EXPIRE_TIME_REFRESH, KEY3
from datetime import datetime, timedelta
from jose.exceptions import ExpiredSignatureError

#–∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á—Ç—ã
from src.settings import PORT, HOST, HOST_USER, HOST_PASSWORD, DEFAULT_EMAIL
from ssl import create_default_context
from email.mime.text import MIMEText
from smtplib import SMTP

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# apikey_scheme = APIKeyCookie(name="Authorization")

# oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")#—ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å


#—Å—Ç–∞—Ç—å—è –ø—Ä–æ jwt –Ω–∞ —Ö–∞–±—Ä–µ
# https://habr.com/ru/articles/340146/
def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    if expires_delta:#–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, —Ç–æ –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–∞–Ω–∏—è
        expire = datetime.utcnow() + expires_delta
    #expires_delta —ç—Ç–æ –µ—Å–ª–∏ –¥–µ–ª–∞—Ç—å –∫–∞–∫—É—é-—Ç–æ
    else:#–∏–Ω–∞—á–µ –∑–∞–¥–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–∞–Ω–∏—è —Ç–∞–∫–∂–µ 30 –º–∏–Ω
        expire = datetime.utcnow() + timedelta(minutes=int(EXPIRE_TIME))#–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ —Å 0 –º–∏–Ω—É—Ç
    to_encode.update({"exp": expire})#—Ç—É—Ç –º—ã –¥–æ–±–∞–≤–∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –∫–æ—Ç–æ—Ä—ã–π —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –≤—ã—à–µ —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª—é—á–æ–º "exp" –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç—Ä–æ–∫–æ–π –≤—ã—à–µ. 
    encoded_jwt = jwt.encode(to_encode, KEY, algorithm=ALG)#—Ç—É—Ç –º—ã –∫–æ–¥–∏—Ä—É–µ–º –Ω–∞—à —Ç–æ–∫–µ–Ω.
    return encoded_jwt



def create_refresh_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    if expires_delta:#–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, —Ç–æ –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–∞–Ω–∏—è
        expire = datetime.utcnow() + expires_delta
    #expires_delta —ç—Ç–æ –µ—Å–ª–∏ –¥–µ–ª–∞—Ç—å –∫–∞–∫—É—é-—Ç–æ
    else:#–∏–Ω–∞—á–µ –∑–∞–¥–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–∞–Ω–∏—è —Ç–∞–∫–∂–µ 30 –º–∏–Ω
        expire = datetime.utcnow() + timedelta(minutes=int(EXPIRE_TIME_REFRESH))#–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ —Å 0 –º–∏–Ω—É—Ç
    to_encode.update({"exp": expire})#—Ç—É—Ç –º—ã –¥–æ–±–∞–≤–∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –∫–æ—Ç–æ—Ä—ã–π —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –≤—ã—à–µ —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª—é—á–æ–º "exp" –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç—Ä–æ–∫–æ–π –≤—ã—à–µ. 
    encoded_jwt = jwt.encode(to_encode, KEY2, algorithm=ALG)#—Ç—É—Ç –º—ã –∫–æ–¥–∏—Ä—É–µ–º –Ω–∞—à —Ç–æ–∫–µ–Ω.
    return encoded_jwt



async def update_tokens(RT, db):#–ø–µ—Ä–µ–¥–∞–µ–º —Å—é–¥–∞ —Ä–µ—Ñ—Ä–µ—à —Ç–æ–∫–µ–Ω –∏ —Å–µ—Å—Å–∏—é —Å –î–ë
	#—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ä–µ—Ñ—Ä–µ—à —Ç–æ–∫–µ–Ω–∞
	try:
		payload = jwt.decode(RT, KEY2, algorithms=[ALG])
		pl_id = payload.get("sub")
		pl_email = payload.get("iss")

	except Exception as ex:#–µ—Å–ª–∏ –∏—Å—Ç–µ–∫ —Ä–µ—Ñ—Ä–µ—à —Ç–æ –µ–≥–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º, –∏ –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
		print("–û–®–ò–ë–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –¢–£–¢!!!!!!!!!")
		print(ex)
		if type(ex) == ExpiredSignatureError:
			us_token: Token = await db.scalar(select(Token).where(Token.refresh_token == RT))
			if us_token:
				await db.delete(us_token)
				await db.commit()
		
		return False, False

    #—Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ—Ñ—Ä–µ—à –∏ –∞–∫—Å–µ—Å. –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –±–µ—Ä–µ–º –∏–∑ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ–π–ª–æ–∞–¥–∞
        
    #–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω –∏–∑ –∫—É–∫ —Å –±–∞–∑–æ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫ –æ–±–Ω–æ–≤–∏–ª —É–∂–µ —Ç–æ–∫–µ–Ω, –∞ –º—ã –Ω–µ—Ç, —Ç–æ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –¥–æ–ª–∂–Ω—ã —É–¥–∞–ª–∏—Ç—å—Å—è
	RT_in_db: Token = await db.scalar(select(Token).where(Token.refresh_token == RT))#–∏—â–µ–º —Ä–µ—Ñ—Ä–µ—à –≤ –î–ë –ø–æ —Ç–æ–∫–µ–Ω—É –∏–∑ –∫—É–∫
	if not RT_in_db:
		tk: Token = await db.scalar(select(Token).where(Token.user_id == int(pl_id)))#–∏—â–µ–º —Ç–æ–∫–µ–Ω –ø–æ –ø–æ–ª—å–∑–∞–∫—É –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
		await db.delete(tk)
		await db.commit()
		await db.refresh(tk)
		print("–¢–æ–∫–µ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –±–∞–∑–æ–π!!!!!!!")
		return False, False

	#—Ä–µ—Ñ—Ä–µ—à —Ç–æ–∫–µ–Ω
	refresh_token_expires = timedelta(minutes=int(EXPIRE_TIME_REFRESH))    
	refresh_token_jwt = create_refresh_token(data={"sub": str(pl_id), "iss": pl_email}, expires_delta=refresh_token_expires)

	#–∞–∫—Å–µ—Å —Ç–æ–∫–µ–Ω
	access_token_expires = timedelta(minutes=int(EXPIRE_TIME))
	access_token_jwt = create_access_token(data={"sub": pl_id, "iss": "showcase"}, expires_delta=access_token_expires)

	#–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ—Ä–µ—à –≤ –±–∞–∑–µ	
	new_RT: Token = Token(user_id=int(pl_id), refresh_token=refresh_token_jwt)#–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω—É–∂–µ–Ω –ò–¥ –ø–æ–ª—å–∑–∞–∫–∞

	await db.delete(RT_in_db)
	db.add(new_RT)
	await db.commit()
	await db.refresh(new_RT)

	return [refresh_token_jwt, access_token_jwt]








import smtplib
from email.message import EmailMessage
from celery import Celery


#—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –¥–∂–∞–Ω–≥–æ. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω—É–∂–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —é–∑–∞—Ç—å –¥–ª—è –ø–æ—á—Ç—ã smtplib. –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—á—Ç—ã —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ —Å–µ–ª–µ—Ä–∏, —ç—Ç–æ –∫–∞–∫ –±—ã —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç —Ñ–∞—Å—Ç–∞–ø–∏, –∫–∞–∫ –±—ã –≤—Ç–æ—Ä–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ò –µ—Å—Ç—å —Ñ–ª–æ–≤–µ—Ä, —ç—Ç–æ –µ—â–µ –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å.
# async def send_email_verify(data: dict|None=None, use_https=False):
# 	msg = MailBody(**data)
#     message = MIMEText(msg.body, "html")
#     message["From"] = USERNAME
#     message["To"] = ",".join(msg.to)
#     message["Subject"] = msg.subject

#     ctx = create_default_context()

#     try:
#         with SMTP(HOST, PORT) as server:
#             server.ehlo()
#             server.starttls(context=ctx)
#             server.ehlo()
#             server.login(USERNAME, PASSWORD)
#             server.send_message(message)
#             server.quit()
#         return {"status": 200, "errors": None}
#     except Exception as e:
#         return {"status": 500, "errors": e}


async def send_email_verify(user, use_https=False):
	email = EmailMessage()
	email['Subject'] = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–µ'
	email['From'] = HOST_USER
	email['To'] = user.email

	http = "http" if use_https == False else "https"	 

	token = jwt.encode({"sub": str(user.id)}, KEY3, algorithm=ALG)
	# to_encode = str(user.id)
	# token = pwd_context.hash(to_encode)

	#–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å—Å—ã–ª–∫–∏ –ø–æ–π–¥—É—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏ activate_user
	email.set_content(f"<a href={http}://127.0.0.1:8000/regusers/verification/check_user/{token}><h1>–°–°–´–õ–ö–ê</h1></a>" , subtype='html')
    
    #–≤ token –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä —á–µ—Ä–µ–∑ —Å–ª–µ—à –∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—Ç–æ—Ä–æ–π —Å—Å—ã–ª–∫–æ–π –∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç


    #–≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–∞–∫–∞ –∏ –ø–æ—Ç–æ–º –¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å. –í—Å–µ —ç—Ç–æ –ø—Ä–æ–∫–∏–Ω—É—Ç—å –≤ —Å—Å—ã–ª–∫–µ. –í –¥–∂–∞–Ω–≥–æ —Ç–∞–º –µ—â–µ —à–∏—Ñ—Ä—É–µ—Ç—Å—è —á—Ç–æ-—Ç–æ. –ú–æ–∂–Ω–æ –ø–æ–¥—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–º
    

	with smtplib.SMTP_SSL(HOST, PORT) as server:
		server.login(HOST_USER, HOST_PASSWORD)
		server.send_message(email)

    # return email



# '<h1>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ</h1><h5>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</h5>'
# f"<a href="{{ protocol }}://{{ domain }}{% url 'regusers:activate_user' uidb64=uid token=token %}"><h1>–°–°–´–õ–ö–ê</h1></a>"
# f"<a href="{{ protocol }}://127.0.0.1:8000/{{ urlfor 'activate_user' }}"><h1>–°–°–´–õ–ö–ê</h1></a>"
# –ø—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–æ–∫–∏–Ω–µ–º —á–µ—Ä–µ–∑ —É—Å–ª–æ–≤–∏–µ
# –¥–æ–º–µ–Ω –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –≤ —Å—Å—ã–ª–∫–µ?
# –≤ —É—Ä–ª –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ –∑–∞—á–µ–º –ø–∏—à–µ—Ç—Å—è uid –∏ token



    
    # current_site = get_current_site(request)
    # context = {
    # 'user': user,
    # 'domain': current_site.domain,
    # "uid": urlsafe_base64_encode(force_bytes(user.pk)),
    # "token": token_generator.make_token(user),
    # 'protocol': 'https' if use_https else 'http',
    # }

    # html_body = render_to_string('regusers/user_active.html', context=context,)
    # msg = EmailMultiAlternatives(subject='–ê–∫—Ç–∏–≤–∞—Ü–∏—è', to=[user.email,],)
    # msg.attach_alternative(html_body, "text/html")
    # msg.send()


#########################
# email = EmailMessage()
#     email['Subject'] = '–ù–∞—Ç—Ä–µ–π–¥–∏–ª –û—Ç—á–µ—Ç –î–∞—à–±–æ—Ä–¥'
#     email['From'] = SMTP_USER
#     email['To'] = SMTP_USER

#     email.set_content(
#         '<div>'
#         f'<h1 style="color: red;">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}, –∞ –≤–æ—Ç –∏ –≤–∞—à –æ—Ç—á–µ—Ç. –ó–∞—Ü–µ–Ω–∏—Ç–µ üòä</h1>'
#         '<img src="https://static.vecteezy.com/system/resources/previews/008/295/031/original/custom-relationship'
#         '-management-dashboard-ui-design-template-suitable-designing-application-for-android-and-ios-clean-style-app'
#         '-mobile-free-vector.jpg" width="600">'
#         '</div>',
#         subtype='html'
#     )
#     return email


# @celery.task
# def send_email_report_dashboard(username: str):
#     email = get_email_template_dashboard(username)
#     with smtplib.SMTP_SSL(SMTP_HOST, SMTP_PORT) as server:
#         server.login(SMTP_USER, SMTP_PASSWORD)
#         server.send_message(email)





#–ø–æ–Ω—è—Ç—å –≥–¥–µ –ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á—Ç—ã –∏ —á—Ç–æ –≤ –Ω–µ–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç html –∏ —Ç–¥
# background_tasks - —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, —Å–∞–º –æ–±—ä–µ–∫—Ç —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–µ–µ. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ
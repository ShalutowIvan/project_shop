#1. Django REST Framework - что это такое | Уроки по Django REST Framework!!!!!!!!!!!!!!!!!!
#drf это дополнение для джанго. нужно чтобы можно было делать запросы с других серверов к приложению на drf.
#rest это архитектурный стиль взаимодействия между клиентом и сервером. описание способа взаимодействия между клиентом и сервером
#на стороне сервеа создается программный интерфейс API.
#DRF это интрумент для создания апи нашего сайта.
#например стороннее приложение делает get запрос к сайту на DRF у какому то урл этого сайта то есть по ссылке. Сайт создает данные по этому апи запросу и отдает ответ клиенту обычно в виде JSON формате. То есть приложение отправило запрос по ссылке, и получило ответ в виде сырых данных в формате JSON. Потом приложение обрабатывает данные и отображает то что ему нужно. 
#в DRF есть CRUD, валидация, авторизация и регистрация юзеров, права доступа к данным через апи.
# схема работы
#приходит апи запрос то есть ссылка из браузера это запрос --- далее маршрутизатор отправляет в обработку этот запрос тому представлению, которое связано с этим запросом, представления обрабатывают запросы и отправляют результат пользователю в виде страницы или просто сырые данные в зависимости от потребности --- далее запрос идет к сериализаторам, они обрабатывают данные, например берут данные из бд и отправляют пользаку в виде JSON например, или сериализатор может удалить или изменить данные.

#2. Установка Django Rest Framework | Уроки по Django REST Framework!!!!!!!!!!!!!!!!!!!!!!

#команда установки такая же как в обычном джанго
#pip install django
#команда старт проекта такая же как в обычном джанго
# django-admin startproject ACCOUNTING
#запуск сервера такой же
#миграции
#python manage.py migrate
#создание приложения
#python manage.py startapp название приложения
#в сеттинг нужно подключить приложение в списке INSTALLED_APPS
#модели частино скопировал
#создание миграций!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#python manage.py makemigrations
#сама миграция!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# python manage.py migrate
# создание суперпользователя
# python manage.py createsuperuser
#я создал пользака root пароль 1234
# суперюзера надо зарегать
# перейти в файл admin.py приложения
#там прописать все наши модели, чтобы они закинулись в админку
#установка DRF!!!!!!!!!!!!!!!!!
# pip install djangorestframework
#потом нужно зарегать приложение DRF 
#в файле settings.py в списке INSTALLED_APPS добавить приложение с названием rest_framework
# импортируем ветку generics, в ней много базовых классов для представлений для DRF. Далее в файле views продолжаем


#3. Базовый класс APIView для представлений | Уроки по Django REST Framework!!!!!!!!!!!!!!!!!!!!!
#при создании апи нужны 3 составляющие:
# 1. Создание представления - views
# 2. Создание сериализатора - для валидации данных как я понял
# 3. Маршрутизация - urls.py
# Рассмотрим представления
# есть класс в DRF класс APIView - этот класс стоит во главе иерархии всех классов представления DRF. То есть другие классы представления наследуются от него. Он представляет собой базовый класс представлений в рамках DRF, базовый имеется ввиду самые базовые функции без лишних конструкций. В доукментации есть описания классов которые наследуются от APIView, их можно потом юзать.
# Сначала определим метод get в этом классе. ОН будет отвечать за get запросы, они будут через него автоматом работать. 
#программа которая отправляет какие либо запросы в API - это постман, самая распространенная программа для запросов. Можно отправлять какие-либо get или post запросы. 
#нужно установить postman
#создаем там новую вкладку new_tab
#там можно выбрать запрос get и в урл скопировать нашу ссылку для представления http://127.0.0.1:8000/api/v1/goodlist/
# Вернется наш словарик, который мы там возвращаем в функции get
#если выбрать сейчас post запрос, то выйдет ошибка, метод post не разрешен. 
# {
#     "detail": "Метод \"POST\" не разрешен."
# }
#такой ответ генерирует базовый класс APIView из DRF. Такой ответ был выдан из-за того что не был определен метод post
#чтобы ошибки такой не было, нужно определить метод post, его нужно так и назвать def post
#теперь в постмане будет возвращаться то, что мы возвращаем в нашей функции post
#теперь попробуем сделать запрос в БД. Сделаем запрос товаров из БД. Они все отобразятся в браузере.
# Также так как мы определили метод post, то в браузере автоматом будет форма для добавления товаров, ее сгенерировал DRF автоматом. Без сериализатора она не работает, но отображается. Если нужно можно сделать сериализатор, тогда будет работать. 
#Аналогично будет и postman
# Если отрправить get запрос, то вернутся значения из БД, те же самые что и в браузере
#в Postman есть вкладка pretty, там данные упорядочены в удобном виде разбитые по строкам. Есть еще вкладка Raw, там сырые данные из запроса, просто сплошным текстом. Preview - это примерно то же самое что и Raw. 
#теперь модифицируем post запрос, чтобы он добавлял новые данные в БД. 
#теперь метод пост добавляет новую запись в БД и возвращает то что было добавлено. 
#теперь можно через программу postman отправить post запрос для добавления строки в БД. Как это сделать. Нужно в программе postman с той же самой ссылкой выбрать post запрос, потом перейти на вкладку body, там пишется тело запроса. Там нужно выбрать raw, это сырой запрос. В этой вкладке нужно прописать словарик с нужными данными для добавления строки в БД. 
#данные нужно написать те, которые мы берем из request в функции post нашей вью в виде словаря. Также по умолчанию в postman выбран заголовок запроса HTTP - Text, а нам нужно выбрать JSON. 
# Также немало важно. Если есть поля с вторичным ключом, то в названия нужно дописывать _id, например не просто group, а group_id и функции post и в JSON, иначе будет ошибка при добавлении записи в БД. 
# {
#     "name_product": "Зубная паста",
#     "slug": "tooth_paste",
#     "price": 110,
#     "photo": "photos/2024/01/26/400.jpg",
#     "stock": 11,
#     "group_id": 3
# }
#в случае если будет что-то не так, то возвращается не json в postman, а html ошибка из джанго. Джанго сам ее формирует. В postman эту же html страницу можно посмотреть на вкладке Preview внизу, и в Pretty будет только код html
#у меня почему-то выходила ошибка 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte
#но запись в базу при этом добавлялась. Из-за чего выходит ошибка, непонятно, вроде сделал все верно. 
#в джанго встроенные html страницы для отображения ошибок. 
#когда на сервер приходит HTTP запрос от клиента в наш API, маршрутизатор передает этот запрос фреймворку, и DRF вызывает нужный метод из класса представления для нужного типа запроса get, post, delete и тд. Получется класс APIView связывает запрос с соответствующим методом из класса который мы пропишем. 

#4. Введение в сериализацию. Класс Serializer | Уроки по Django REST Framework!!!!!!!!!!!!!!!!!!!!!
# При обмене данными через API чаще всего используют форматы JSON и XML. JSON чаще. Иногда разрабатывают свой собственный формат для обмена, но редко. 
# Сериализатор - это конвертатор объектов языка python в JSON формат. Это его основная функция. Также он конвертирует модели джанго и наборы queryset. Также и наоборот из JSON в объекты питона. 
#перейдем в файл serializers.py там пропишем класс, который будет преобразовывать в JSON формат, как бы имитировать нашу модель. 

# Как я понял в качестве сериализатора в FastApi используется pydentic. С ним надо тоже разобраться!!!!!!!!!!!!

# ост 9 мин


















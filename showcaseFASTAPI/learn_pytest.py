# def division(a, b):
# 	return a / b



# print(division(10, 2))

#команда геренации файла с зависимостями:
# pip freeze > requirements.txt

# каждый тестовый модуль то есть файл  питона должен начинаться со слова test. В имени файла должно быть понятно что тестируется. Также все файлы с тестами долны быть в папке tests, так как либа pytest парсит из этой папки все файлы с названием test_
#для запуска тестов в консоли можно прописать pytest tests/*
#можно и писать название файла. 
# структура запуска
# pytest путь к файлам/файлу теста. Обычно в консоли мы находимся в корневой папке и от нее пишем путь к тестовому файлу
# pytest -s -v tests/*
# -s - для отображения принтов в файлах
# -v - verbose для отображения названия тестов, то есть функций тестов. 
#у меня если писать * то почему-то файлы не находятся, и нужно писать именно название файла. 


# Pytest #1: Установка, конфигурация и первые тесты!!!!!!!!!!!

# еще для запуска тестов можно просто написать pytest в консоли с активированным виртуальным окружением

# после запуска будет отображено следующее:
# platform win32 -- Python 3.10.2, pytest-8.1.1, pluggy-1.4.0 #тут отображается система с которой запущены тесты
# rootdir: C:\Users\shalutov\Desktop\python #тут отображается папка корневая. у меня почему то берется вся папка питона
# configfile: pyproject.toml#это не понятно что
# collected 1 item#это колво тестов которые pytest смог найти. Далее ниже будет статусы всех тестов и их файлы

# tests\test_division_func.py .  
#тут отображается в конце просто точка, если тестов будет несколько будет несколько точек. Можно написать флаг -v, то есть pytest -v, тогда будет норм сообщение, например PASSED. 

#если в файл с тест импортировать что-то из файла проекта который находится не в папке tests, то pytest не увидит наш код, он не будет видеть импорты
#pytest не увидит такой импорт, так как он не видит где находится наш код в файлах проекта. поэтому нужен конфигурационный файл для pytest
#для конфигурации нужно создать файл pytest.ini в корне проекта. Там нужно прописать следующее:
# [pytest]
# pythonpath = . src
# первая строка это для указания pytest его конфигурации
# вторая строка это путь к файлам. Как именно их указывать пока не понятно
#у меня это не срабатывает если писать просто pytest. А если прописать путь к файлу, то нет ошибки, и путь из конфига срабатывает. 

# Pytest #2: Зачем писать тесты + Пирамида тестирования!!!!!!!!!!!!!
#Зачем писать тесты. 
# Они позволяют избежать багов при разворачивании приложения на продакшн. Прогоняем тесты, если они не проходят, то исправляем баги. 
# Позволяют служить в роли документации. Тестами обычно покрыт ключевой функционал приложения. И из них можно понять как работает основное приложение. 
# Улучшают архитектуру. При написании тестов, можно увидеть что чего нет в проекте, или нет какой то зависимости. И недостающее можно подключить. 

# Пирамида тестирования. Позволяет узнать сколько стоит по времени тесты и как долго их делать. Ниже список видов тестов в порядке их убывания по количеству. 
# Модульные тесты - это тесты отдельных функций или классов в проекте. Таких тестов больше всего, но они легкие
# Интеграционные тесты - это тесты взаимодействия нескольких функций, например запустить 2 функции и что будет в результатет. Их меньше но они сложнее
# Сквозные тесты - это тестирование всего проекта, то есть есть набор функционала в проекте, и куча взаимодействия и мы все это тестируем. Это самое сложное. 
# Также есть и ручное тестирование. Это как дополнение. Эти занимаются отдельные специалисты. 
# В пирамиде идет как бы пирамида от самого большого числа тестов в Модульных тестах, к самому меньшему колву - Сквозные тесты.

# Есть еще рожок тестирования, это наоборот, когда нет автотестов или их меньше. Ниже написал виды тестов по убыванию их колва
# Ручное тестирование 
# Сквозные тесты
# Интеграционные тесты
# Модульные тесты

# В больших компаниях чаще используется пирамида тестирования, а не рожок. 

# Pytest #3: Дебаггер в PyCharm и Visual Studio Code!!!!!!!!!!!!!!!!


# Pytest #4: Параметризация тестов


# Pytest #5: Обработка исключений + Группировка тестов

# для объединения тестов можно создать класс с тестами. 


# Pytest #6.1: Фикстуры — Основы применения. Инфа по лекциям из видео в файле test_division_func.py



# FastAPI - Тестируем API с pytest #10!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# https://www.youtube.com/watch?v=4xJGQKfN3ZM&t=20s&ab_channel=%D0%90%D1%80%D1%82%D1%91%D0%BC%D0%A8%D1%83%D0%BC%D0%B5%D0%B9%D0%BA%D0%BE
# создал файл с названием pyproject.toml
# в нем прописал следующее:
# [tool.pytest.ini_options]
# pythonpath = [
# 	".", "src",
# ]
# asyncio_mode="auto"

# это нужно для конфигурации pytest при работе с фастапи

# также нужно установить асинхронный pytest-asyncio
# pip install pytest-asyncio

# идем в conftest.py
# там будет инфа с фикстурами для подключения к тестовой бд и тд

# подключаемся к бд и добавляем туда таблицы и в итоге потом удаляем таблицы


# затем имитируем клиента, то есть обращение клиента к серверу. Есть спец класс для имитирования клиента
# есть также синхронный клиент и асинхронный клиент, для них разные классы и по разному реализуются.

# мне нужно будет сделать сначала тест на создание группы товара
# потом сделать тесты на создание товаров, так как чтобы создать товар нужна группа уже ранее созданная

# статус кодов 200 - все ок
# 201 - означает что объект создан

# он делает тест на добавление в бд и потом проверяет что эти данные в бд появились, добавление идет с помощью имитированных клиентов. Проверяет статусы коды статусов и данные в бд. 
# Тест кейсы можно еще придумать















#############################################################################
# pytest luchanos
# PYTHON PYTEST. ОСНОВЫ. 1 ЧАСТЬ
# тесты функции деления в файле test_d. 


# PYTHON PYTEST. ОСНОВЫ. 2 ЧАСТЬ

# сделаем имитацию открытия бд на примере открытия файла

# важно вычищать БД после предыдущих тестов. в нашем случае чистить файл перед добавлением инфы в него
# очистку файла или бд можно записать в фикстуре в файле conftest.py

# урок 3
# ПИШЕМ ПРОСТОЙ PYTHON WEB-КЛИЕНТ (ЧТОБЫ ПОТОМ ПРОТЕСТИРОВАТЬ ЕГО С ПОМОЩЬЮ PYTEST)



# 7 урок
# PYTEST ИСПОЛЬЗОВАНИЕ ФИКСТУР (FIXTURE) В ТЕСТАХ PYTHON
# моки - это подмена боевой базы, то есть подмена инфа боевой базы на тестовые данны
# моки это функции которые имитируют ответы боевой бд
# но в уроке будет инфа по поднятия тестовой БД, вместо моков будем юзать тестовую БД











